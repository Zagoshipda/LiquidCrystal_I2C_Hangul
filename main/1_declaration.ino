int enrollNum = 0;
int delayTime = 500;

void setDelayTime(int t){
  delayTime = t;
}
byte space[8] = {
  B00000,B00000,B00000,B00000,B00000,B00000,B00000,B00000
};
//초성/종성 자음
byte r[8] = {//ㄱ
        B11111,B00001,B00001,B00001,B00000,B00000,B00000,B00000
};
byte s[8] = {//ㄴ
        B10000,B10000,B10000,B11111,B00000,B00000,B00000,B00000
};
byte e[8] = {//ㄷ
        B11111,B10000,B10000,B11111,B00000,B00000,B00000,B00000
};
byte f[8] = {//ㄹ
        B11111,B00001,B11111,B10000,B11111,B00000,B00000,B00000
};
byte a[8] = {//ㅁ
        B11111,B10001,B10001,B11111,B00000,B00000,B00000,B00000
};
byte q[8] = {//ㅂ
        B01010,B01110,B01010,B01110,B00000,B00000,B00000,B00000
};
byte t[8] = {//ㅅ
        B00100,B00100,B01010,B10001,B00000,B00000,B00000,B00000
};
byte d[8] = {//ㅇ
        B01110,B11011,B10001,B11011,B01110,B00000,B00000,B00000
};
byte w[8] = {//ㅈ
        B11111,B00100,B01010,B10001,B00000,B00000,B00000,B00000
};
byte c[8] = {//ㅊ
        B00100,B11111,B00100,B01010,B10001,B00000,B00000,B00000
};
byte z[8] = {//ㅋ
        B11111,B00001,B01111,B00001,B00001,B00000,B00000,B00000
};
byte x[8] = {//ㅌ
        B11111,B10000,B11111,B10000,B11111,B00000,B00000,B00000
};
byte  v[8] = {//ㅍ
        B11111,B01010,B01010,B11111,B00000,B00000,B00000,B00000
};
byte g[8] = {//ㅎ
        B00100,B11111,B00100,B01010,B00100,B00000,B00000,B00000
};
byte R[8] = {//ㄲ
        B11111,B00101,B00101,B00101,B00000,B00000,B00000,B00000
};
byte E[8] = {//ㄸ
        B11111,B10100,B10100,B11111,B00000,B00000,B00000,B00000
};
byte Q[8] = {//ㅃ
        B10101,B11111,B10101,B11111,B00000,B00000,B00000,B00000
};
byte T[8] = {//ㅆ
        B01010,B01010,B10101,B10101,B00000,B00000,B00000,B00000
};
byte W[8] = {//ㅉ
        B11111,B01010,B10101,B10101,B00000,B00000,B00000,B00000
};
//ㅡ형 모음
byte m[8] = {//ㅡ
        B00000,B00000,B00000,B00000,B00000,B00000,B11111,B00000
};
byte h[8] = {//ㅗ
        B00000,B00000,B00000,B00000,B00000,B00100,B11111,B00000
};
byte y[8] = {//ㅛ
        B00000,B00000,B00000,B00000,B00000,B01010,B11111,B00000
};
byte n[8] = {//ㅜ
        B00000,B00000,B00000,B00000,B00000,B00000,B11111,B00100
};
byte b[8] = {//ㅠ   
        B00000,B00000,B00000,B00000,B00000,B00000,B11111,B01010
};
//ㅣ형 모음
byte k[8] = { //ㅏ
        B00000,B10000,B10000,B10000,B11000,B10000,B10000,B00000
};
byte i[8] = { //ㅑ
        B00000,B10000,B10000,B11000,B10000,B11000,B10000,B00000
};
byte j[8] = { //ㅓ
        B00000,B01000,B01000,B01000,B11000,B01000,B01000,B00000
};
byte u[8] = { //ㅕ
        B00000,B01000,B01000,B11000,B01000,B11000,B01000,B00000
};
byte l[8] = { //ㅣ
        B00000,B10000,B10000,B10000,B10000,B10000,B10000,B00000
};
byte o[8] = { //ㅐ
        B00000,B10100,B10100,B10100,B11100,B10100,B10100,B00000
};
byte O[8] = { //ㅒ
        B00000,B10100,B10100,B11100,B10100,B11100,B10100,B00000
};
byte p[8] = {//ㅔ
        B00000,B01010,B01010,B01010,B11010,B01010,B01010,B00000
};
byte P[8] = { //ㅖ
        B00000,B01010,B01010,B11010,B01010,B11010,B01010,B00000
};

//딕셔너리 자료형의 Key 배열과 Value 배열
char choAndJongKey[] = { //len:19
  'r','s','e','f','a','q','t','d','w','c','z','x','v','g','R','E','Q','T','W'
};
byte* choAndJongValue[] = {//ㄱ,ㄴ,ㄷ,ㄹ,ㅁ,ㅂ,ㅅ,ㅇ,ㅈ,ㅊ,ㅋ,ㅌ,ㅍ,ㅎ,ㄲ,ㄸ,ㅃ,ㅆ,ㅉ len:19
  r,s,e,f,a,q,t,d,w,c,z,x,v,g,R,E,Q,T,W
};
char uFormKey[] = { //len:5
  'm','h','y','n','b'
};
byte* uFormValue[] = {//ㅡ,ㅗ,ㅛ,ㅜ,ㅠ len:5
  m,h,y,n,b
};
char yiFormKey[] = { //len:9
  'k','i','j','u','l','o','O','p','P'
};
byte* yiFormValue[] = {//ㅏ,ㅑ,ㅓ,ㅕ,ㅣ,ㅐ,ㅒ,ㅔ,ㅖ len:9
  k,i,j,u,l,o,O,p,P
};

